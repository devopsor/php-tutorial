<!-- PHP Session -->
<!-- In this tutorial, you will learn how to temporarily store some data on the server using a PHP session. -->

<!-- What is Session
Although you can use cookies to store data, there are some security issues with it.
Because cookies are stored on the user's computer, an attacker can easily modify the cookie content to
insert potentially harmful data into your application, potentially disrupting your application. -->

<!-- Also, every time the browser requests a URL from the server, all cookie data for the website is automatically
sent to the server in the request.
This means that if you store 5 cookies on the user's system, each 4KB in size, the browser needs to upload
20KB of data each time the user views the page, which may affect the performance of your site. -->

<!-- You can solve both of these problems by using PHP sessions. A PHP session stores data on the server
rather than the user's computer. In a session-based environment, each user is identified by a unique number
called a session identifier or SID. This unique session ID is used to link each user with their own information
on the server (e.g. emails, posts, etc.). -->

<!-- Tip: The session ID is randomly generated by the PHP engine and is almost impossible to guess.
Also, since session data is stored on the server, it doesn't have to be sent with every browser request. -->

<?php
if (isset($_COOKIE["PHPSESSID"])) {
    echo "SessionId: " . $_COOKIE["PHPSESSID"];
} else {
    echo "Welcome Guest!";
}
echo "<br>";
session_start();

//Access session data
echo 'Hi, ' . $_SESSION["firstname"] . ' ' . $_SESSION["lastname"];
echo "<br>";
echo 'Hi, ' . $_SESSION["address"] . ' ' . $_SESSION["phone"];

// SessionId: 480ahegpcqseot01tlusni5f7u
// Hi, Peter Parker
// Hi, NewYork 12345678