<!--
    ※PHP error handling
    In this tutorial, you will learn how to use PHP's error handling features to gracefully handle error conditions.

    ※Handle errors
    Sometimes, your application will not function properly, causing errors.
    1.There are several possible reasons for the error, such as:
    2.The web server may be running out of disk space
    3.The user may have entered an invalid value in a form field
    4.The file or database record you are trying to access may not exist
    5.The application may not have permission to write to the file on the disk
    6.Services that the application needs to access may be temporarily unavailable
    7.These types of errors are called runtime errors because they occur while the script is running.
       They are different from syntax errors that need to be fixed before the script runs.
    8.Professional applications must have features to handle such runtime errors appropriately.
       Often, this means more clearly and precisely informing users of the problem as to what is going on.
-->

<!--
    E_ERROR:1:
    Fatal runtime error, unrecoverable. Execution of the script will stop immediately.
    E_WARNING:2:
    Runtime warning. It's not fatal, most errors fall into this category. Execution of the script does not stop.
    E_NOTICE:8:
    Runtime notifications. Indicates that the script has encountered a condition that could cause an error, although this can also occur when running the script normally.
    E_USER_ERROR:256:
    User generated fatal error message. This is similar to E_ERROR except that it is generated by the PHP script using the function trigger_error() instead of the PHP engine.
    E_USER_WARNING:512:
    Non-fatal user-generated warning messages. This is similar to E_WARNING, but it is generated by the PHP script using the function trigger_error() instead of the PHP engine.
    E_USER_NOTICE:1024:
    User generated notification messages. This is similar to E_NOTICE, but it is generated by the PHP script using the function trigger_error() instead of the PHP engine.
    E_STRICT:2048:
    Not strictly a bug, but triggered whenever PHP encounters code that could cause problems or forward incompatibilities
    E_ALL:8191:
    All errors and warnings, except E_STRICT prior to PHP 5.4.0.
-->

<?php

// Basic error handling using the die() function

//try to open a file that doesn't exist
if (file_exists("sample.txt")) {
    $file = fopen("sample.txt", "r");
} else {
    die("Error: The file you are trying to access doesn't exist.");
}
